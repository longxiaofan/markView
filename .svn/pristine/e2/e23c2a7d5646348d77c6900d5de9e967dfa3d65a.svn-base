#include "BCLoginDlg.h"
#include "ui_BCLoginDlg.h"
#include <QPainter>
#include <QMouseEvent>
#include <QMessageBox>
#include <QNetworkInterface>

#include "../Common/BCCommon.h"
#include "../Common/BCCommunication.h"
#include "../Common/BCLocalServer.h"
#include "../Common/BCLocalDatabase.h"

BCLoginDlg::BCLoginDlg(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::BCLoginDlg)
{
    ui->setupUi(this);

    setWindowFlags(Qt::FramelessWindowHint);
    m_bPress = false;
    m_pt = QPoint(0, 0);

    m_bServerReturn = false;

    this->setWindowIcon(QIcon(BCCommon::g_qsImageFilePrefix + BCCommon::g_qsApplicationIcon));

    // 设置用户名可编辑，密码隐藏
    ui->m_pUserCombox->setEditable(true);
    ui->m_pPasswordLineEdit->setEchoMode(QLineEdit::Password);

    // 用户名、密码、关闭按钮图片
    ui->m_pUserLabel->setPixmap(QPixmap(BCCommon::g_qsApplicationDefaultStylePath+"/loginuser24.png"));
    ui->m_pPasswordLabel->setPixmap(QPixmap(BCCommon::g_qsApplicationDefaultStylePath+"/loginpwd24.png"));
    ui->m_pCloseBtn->setIcon(QIcon(BCCommon::g_qsApplicationDefaultStylePath+"/loginclose24.png"));

    QPalette palette;
    palette.setBrush(QPalette::Background, QBrush(QPixmap(BCCommon::g_qsApplicationDefaultStylePath+"/loginbackground.png")));
    ui->m_pBackGroudPixmapWidget->setPalette(palette);

    // 隐藏设置控件
    ui->m_pSetWidget->hide();
    int height = this->height();
    this->setMaximumHeight(height-125);
    this->setMinimumHeight(height-125);

    // 初始化用户控件内容
    initUsersFromXml();
}

BCLoginDlg::~BCLoginDlg()
{
    delete ui;
}

void BCLoginDlg::mousePressEvent(QMouseEvent *e)
{
    if(e->button() == Qt::LeftButton) {
        m_bPress = true;
        m_pt = e->pos();
    }
}

void BCLoginDlg::mouseMoveEvent(QMouseEvent *e)
{
    if ( m_bPress ) {
        this->move(e->globalPos().x()-m_pt.x(),
                   e->globalPos().y()-m_pt.y());
    }
}

void BCLoginDlg::mouseReleaseEvent(QMouseEvent *)
{
    m_bPress = false;
}

void BCLoginDlg::initUsersFromXml()
{
    QFile file( QString("../xml/BCLoginRecord.xml") );
    if(!file.open(QIODevice::ReadOnly)){
        return;
    }

    // 将文件内容读到QDomDocument中
    QDomDocument doc;
    bool bLoadFile = doc.setContent(&file);
    file.close();

    if ( !bLoadFile )
        return;

    // 二级链表
    QDomElement docElem = doc.documentElement();

    // 循环添加用户
    for (int i = 0; i < docElem.childNodes().count(); i++) {
        QDomNode nodeUser = docElem.childNodes().at(i);
        if ( !nodeUser.isElement() )
            continue;

        QDomElement eleUser = nodeUser.toElement();
        QString qsUser = eleUser.attribute(QString("usr"));

        ui->m_pUserCombox->addItem( qsUser );
    }

    // 更新服务器配置信息
    int nIsConnectServer = docElem.attribute("IsConnectServer").toInt();
    QString qsIP = docElem.attribute("IP");
    QString qsPort = docElem.attribute("Port");

    ui->m_pConnectServerCheckBox->setChecked( (1 == nIsConnectServer) ? true : false );
    ui->m_pIPLineEdit->setText( qsIP );
    ui->m_pPortLineEdit->setText( qsPort );

    // 判断是否有服务器模块，保证登录界面和设置界面按钮对齐
    if (1 == docElem.attribute("ServerMode").toInt()) {
        ui->m_pLoginBtn->resize(75, 24);
        ui->m_pLoginBtn->move(104, 92);
    } else {
        ui->m_pLoginBtn->resize(160, 24);
        ui->m_pLoginBtn->move(104, 92);

        ui->m_pConnectServerCheckBox->setChecked( false );
    }
}

void BCLoginDlg::updateUsersOfXml()
{
    QFile file( QString("../xml/BCLoginRecord.xml") );
    if(!file.open(QIODevice::ReadOnly)){
        return;
    }

    // 将文件内容读到QDomDocument中
    QDomDocument doc;
    bool bLoadFile = doc.setContent(&file);
    file.close();

    if ( !bLoadFile )
        return;

    // 二级链表
    QDomElement docElem = doc.documentElement();

    // 更新服务器配置信息
    int nIsConnectServer = ui->m_pConnectServerCheckBox->isChecked() ? 1 : 0;
    QString qsIP = ui->m_pIPLineEdit->text();
    QString qsPort = ui->m_pPortLineEdit->text();

    docElem.setAttribute("IsConnectServer", QString::number(nIsConnectServer));
    docElem.setAttribute("IP", qsIP);
    docElem.setAttribute("Port", qsPort);

    QString qsUser = ui->m_pUserCombox->currentText();

    // 删除已有用户
    for (int i = 0; i < docElem.childNodes().count(); i++) {
        QDomNode nodeUser = docElem.childNodes().at(i);
        if ( !nodeUser.isElement() )
            continue;

        QDomElement eleUser = nodeUser.toElement();
        QString usr = eleUser.attribute(QString("usr"));
        if (usr != qsUser)
            continue;

        // 找到则移动到第一个位置
        docElem.removeChild( nodeUser );

        break;
    }

    // 将用户插入到第一个位置
    QDomElement eleUser = doc.createElement(QString("User"));
    eleUser.setAttribute(QString("usr"), qsUser);
    eleUser.setAttribute(QString("pwd"), QString(""));

    docElem.insertBefore(eleUser, docElem.firstChild());

    // 写入文件
    if( !file.open(QIODevice::WriteOnly | QIODevice::Truncate) )
        return;
    QTextStream out(&file);
    doc.save(out,4);
    file.close();
}

void BCLoginDlg::on_m_pSetBtn_clicked()
{
    ui->m_pLoginWidget->hide();
    ui->m_pSetWidget->show();
}

void BCLoginDlg::on_m_pCloseBtn_clicked()
{
    this->close();
}

void BCLoginDlg::on_m_pCancelBtn_clicked()
{
    ui->m_pLoginWidget->show();
    ui->m_pSetWidget->hide();
}

void BCLoginDlg::on_m_pLoginBtn_clicked()
{
    QString qsUser = ui->m_pUserCombox->currentText();
    QString qsPwd = ui->m_pPasswordLineEdit->text();
    if ( qsUser.isEmpty() ) {
        QMessageBox::warning(this,
                             tr("警告"),
                             tr("用户名不可以为空!"),
                             QMessageBox::Ok);
        return;
    }

    // 是否连接服务器
    BCCommon::g_bConnectWithServer = (Qt::Checked == ui->m_pConnectServerCheckBox->checkState()) ? true : false;
    if ( !BCCommon::g_bConnectWithServer ) {
        // 加载系统人员权限数据
        BCLocalServer *pLocalServer = BCLocalServer::Application();
        QPoint pt = pLocalServer->Authenticate(qsUser, qsPwd);

        SetServerRes(pt.x(), pt.y());
    } else {
        // 当连接服务器时需要等待异步调用
        BCCommunication *pCommunication = BCCommunication::Application();

        QString ip = ui->m_pIPLineEdit->text();
        QString port = ui->m_pPortLineEdit->text();

        pCommunication->SetIPAndPort(ip, port.toInt());
        QThread::msleep(5);

        pCommunication->RequestLogin(this, qsUser, qsPwd);

        QTimer::singleShot(3000, this, SLOT(onTimeout()));
    }
}

void BCLoginDlg::onTimeout()
{
    if ( !m_bServerReturn )
        SetServerRes(-1, -1);
}

void BCLoginDlg::SetServerRes(int userid, int level)
{
    m_bServerReturn = true;

    if (-1 == userid) {
        QString qsWarning = BCCommon::g_bConnectWithServer ? tr("用户名或密码错误，如确认登录信息无误请检查服务器配置是否正确!") : tr("用户名或密码错误!");
        QMessageBox::warning(this,
                             tr("警告"),
                             qsWarning,
                             QMessageBox::Ok);
    } else if (-2 == userid) {
        QString qsWarning = BCCommon::g_bConnectWithServer ? tr("当前用户已经在其他设备上登录，不可重复登录!") : tr("用户名或密码错误!");
        QMessageBox::warning(this,
                             tr("警告"),
                             qsWarning,
                             QMessageBox::Ok);
    } else {
        MainWindow *pApplication = BCCommon::Application();

        BCSUser *pUser = new BCSUser;
        pUser->id = userid;
        pUser->loginName = ui->m_pUserCombox->currentText();
        pUser->password = ui->m_pPasswordLineEdit->text();
        pUser->level = level;
        pApplication->SetCurrentUser( pUser );

        // 登录成功修改xml文件，不存储root用户
        if (0 != level)
            updateUsersOfXml();

        accept();
    }
}

void BCLoginDlg::on_m_pOkBtn_clicked()
{
    // set ip & port
    bool bConnectServer = (Qt::Checked == ui->m_pConnectServerCheckBox->checkState()) ? true : false;
    QString ip = ui->m_pIPLineEdit->text();
    QString port = ui->m_pPortLineEdit->text();

    // 如果连接服务器时ip和端口不能为空
    if (bConnectServer && (ip.isEmpty() || port.isEmpty())) {
        QMessageBox::warning(this,
                             tr("警告"),
                             tr("连接服务器时IP和端口不可为空!"),
                             QMessageBox::Ok);

        return;
    }

    ui->m_pLoginWidget->show();
    ui->m_pSetWidget->hide();

    // 设置IP和端口
    if ( bConnectServer ) {
        BCCommunication *pCommunication = BCCommunication::Application();
        pCommunication->SetIPAndPort(ip, port.toInt());
    }
}
